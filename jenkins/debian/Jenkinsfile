def transformIntoStep(String pipeline_version, String kernelci_arch, String debian_arch) {
  return {
    stage("Build image for ${kernelci_arch}") {
      sh "mkdir -p ${pipeline_version}/${kernelci_arch}/"
      sh "debos -t architecture:${debian_arch} -t basename:${pipeline_version}/${kernelci_arch}/ jenkins/debian/debos/stretch.yaml"
    }
  }
}

def pipeline_version = VersionNumber(versionNumberString: '${BUILD_DATE_FORMATTED,"yyyyMMdd"}.${BUILDS_TODAY_Z}')
def kernelci_arches = ["arm64", "armel", "x86", "x86_64"]
def debian_arches = ["arm64", "armhf", "i386", "amd64"]

node("docker-slave") {

  stage("Checkout") {
    checkout scm
  }

  docker.build("debian", "-f jenkins/debian/Dockerfile --pull .").inside("--device=/dev/kvm") {

    stage("Build images") {
      def stepsForParallel = [:]
      for (int i = 0; i < kernelci_arches.size(); i++) {
          def s = kernelci_arches.get(i)
          def buildStep = "Build image for ${s}"
          stepsForParallel[buildStep] = transformIntoStep(pipeline_version,
                                                          kernelci_arches.get(i),
                                                          debian_arches.get(i))
      }
      parallel stepsForParallel
    }
  }
/*
  stage ("Upload images") {
    def api = "https://staging-api.kernelci.org"
    def publish_path = "images/rootfs/debian/${PIPELINE_VERSION}"

    for (int i = 0; i < kernelci_arches.size(); i++) {
      def arch = kernelci_arches.get(i)
      sh "python push-source.py --token ${API_TOKEN} --api api --publish_path ${publish_path}/${arch} ${pipeline_version}/${arch}/rootfs.cpio.gz"
    }
  }
*/
  stage ("Upload images") {
    dir ("${pipeline_version}") {
      for (int i = 0; i < kernelci_arches.size(); i++) {
        def s = kernelci_arches.get(i)
        archiveArtifacts artifacts: "${s}/rootfs.cpio.gz", fingerprint: true
      }
    }
  }
}
