def pipeline_version = VersionNumber(versionNumberString: '${BUILD_DATE_FORMATTED,"yyyyMMdd"}.${BUILDS_TODAY_Z}')
def kernelci_arches = ["armel"] //, "arm64", "x86", "x86_64"]
def debian_arches = ["armhf", "arm64", "i386", "amd64"]
def toolchain_arches = ["arm-linux-gnueabihf", "aarch64-linux-gnu", "i386-linux-gnu", "x86_64-linux-gnu"]

def makeImageStep(String pipeline_version, String kernelci_arch, String debian_arch) {
  return {
    node("docker-slave") {
      stage("Checkout") {
        checkout scm
      }

      docker.build("debian", "-f jenkins/debian/Dockerfile_debos --pull .").inside("--device=/dev/kvm") {
        stage("Build base image for ${kernelci_arch}") {
          sh "mkdir -p ${pipeline_version}/${kernelci_arch}"
          sh "debos -t architecture:${debian_arch} -t basename:${pipeline_version}/${kernelci_arch} -t extra_packages:'libpciaccess0 libkmod2 libprocps6 libcairo2 libunwind8 libudev1' jenkins/debian/debos/stretch.yaml"
          stash includes: "${pipeline_version}/${kernelci_arch}/rootfs.cpio.gz", name: 'rootfs-${kernelci_arch}'
        }
      }
    }
  }
}

def makeBuildStep(String pipeline_version, String kernelci_arch, String debian_arch, String toolchain_arch) {
  return {
    node("docker-slave") {
      stage("Checkout") {
        checkout scm
      }

      docker.build("debian", "-f jenkins/debian/Dockerfile_debian --pull .").inside("--device=/dev/kvm") {
        dir("${pipeline_version}") {
          dir("libdrm") {
            stage("Build libdrm for ${kernelci_arch}") {
              git url: "git://anongit.freedesktop.org/mesa/drm"
              sh "mkdir build"
              sh "PKG_CONFIG_PATH=/usr/lib/${toolchain_arch}/pkgconfig/ sh autogen.sh --host=${toolchain_arch} --enable-intel --prefix=\$(pwd)/build/"
              sh "make -j\$(nproc) V=1"
              sh "make -j\$(nproc) install V=1"
              sh "find -H build/ | cpio -H newc -v -o | gzip -c -c > libdrm.cpio.gz"
              stash includes: "libdrm.cpio.gz", name: "libdrm-${kernelci_arch}"
            }
          }

          dir("igt-gpu-tools") {
            stage("Build igt for ${kernelci_arch}") {
              git url: "git://anongit.freedesktop.org/drm/igt-gpu-tools"
              sh "PKG_CONFIG_PATH=/usr/lib/${toolchain_arch}/pkgconfig/:\$(pwd)/../libdrm/build/lib/pkgconfig sh autogen.sh --host=${toolchain_arch}"
              sh "make -j\$(nproc) V=1"
              sh "echo tests/core_auth tests/core_get_client_auth tests/core_getclient tests/core_getstats tests/core_getversion tests/core_prop_blob tests/core_setmaster_vs_auth tests/drm_read tests/kms_addfb_basic tests/kms_atomic tests/kms_flip_event_leak tests/kms_setmode tests/kms_vblank tests/kms_frontbuffer_tracking tests/kms_flip tests/testdisplay | cpio -H newc -v -o | gzip -c - > igt.cpio.gz"
              stash includes: "igt.cpio.gz", name: "igt-${kernelci_arch}"
            }
          }
        }
      }
    }
  }
}

def stepsForParallel = [:]
for (int i = 0; i < kernelci_arches.size(); i++) {
    def s = kernelci_arches.get(i)
    def buildStep = "Build image for ${s}"
    stepsForParallel[buildStep] = makeImageStep(pipeline_version,
                                                kernelci_arches.get(i),
                                                debian_arches.get(i))
    buildStep = "Build test suite for ${s}"
    stepsForParallel[buildStep] = makeBuildStep(pipeline_version,
                                                kernelci_arches.get(i),
                                                debian_arches.get(i),
                                                toolchain_arches.get(i))
}

parallel stepsForParallel

node {
  for (int i = 0; i < kernelci_arches.size(); i++) {
    def arch = kernelci_arches.get(i)
    stage("Adding test suite to image for ${arch}") {
      unstash "rootfs-${arch}"
      unstash "libdrm-${arch}"
      unstash "igt-${arch}"
      sh "mv rootfs.cpio.gz rootfs-${arch}.cpio.gz"
      sh "cat libdrm.cpio.gz >> rootfs-${arch}.cpio.gz"
      sh "cat igt.cpio.gz >> rootfs-${arch}.cpio.gz"
      archiveArtifacts artifacts: rootfs-${arch}.cpio.gz
    }
  }
}

