def pipeline_version = VersionNumber(versionNumberString: '${BUILD_DATE_FORMATTED,"yyyyMMdd"}.${BUILDS_TODAY_Z}')
def kernelci_arches = ["armel"] //, "arm64"] //, "x86", "x86_64"]
def debian_arches = ["armhf", "arm64", "i386", "amd64"]
def toolchain_arches = ["arm-linux-gnueabihf", "aarch64-linux-gnu", "i386-linux-gnu", "x86_64-linux-gnu"]

def makeImageStep(String pipeline_version, String kernelci_arch, String debian_arch) {
  return {
    node("docker-slave") {
      stage("Checkout") {
        checkout scm
      }

      docker.build("debian", "-f jenkins/debian/Dockerfile_debos --pull .").inside("--device=/dev/kvm") {
        stage("Build base image for ${kernelci_arch}") {
          sh """
            mkdir -p ${pipeline_version}/${kernelci_arch}
            debos -t architecture:${debian_arch} -t extra_packages:'libpciaccess0 libkmod2 libprocps6 libcairo2 libunwind8 libudev1 libglib2.0-0' jenkins/debian/debos/stretch.yaml
          """
          stash includes: "rootfs.cpio.gz", name: "rootfs-${kernelci_arch}"
          archiveArtifacts artifacts: "rootfs.cpio.gz", fingerprint: true
        }
      }
    }
  }
}

def makeBuildStep(String pipeline_version, String kernelci_arch, String debian_arch, String toolchain_arch) {
  return {
    node("docker-slave") {
      stage("Checkout") {
        checkout scm
      }

      docker.build("debian", "-f jenkins/debian/Dockerfile_debian --pull --build-arg=\"DEBIAN_ARCH=${debian_arch}\" .").inside("--device=/dev/kvm") {
        dir("${pipeline_version}") {
          dir("v4l2-compliance") {
            stage("Build v4l2-compliance for ${kernelci_arch}") {
              git url: "git://linuxtv.org/v4l-utils.git"
              sh """
                sh bootstrap.sh
                mkdir install
                PKG_CONFIG_PATH=/usr/lib/${toolchain_arch}/pkgconfig/ ./configure --host=${toolchain_arch} --prefix=\$(pwd)/install
                make -j\$(nproc) V=1
                make -j\$(nproc) V=1 install
                find install
                #${toolchain_arch}-strip usr/bin/*
                #find -H usr | cpio -H newc -v -o | gzip -c - > igt.cpio.gz
              """
              stash includes: "v4l2-compliance.cpio.gz", name: "v4l2-compliance-${kernelci_arch}"
              archiveArtifacts artifacts: "v4l2-compliance.cpio.gz", fingerprint: true
            }
          }
        }
      }
    }
  }
}

def stepsForParallel = [:]
for (int i = 0; i < kernelci_arches.size(); i++) {
    def s = kernelci_arches.get(i)
    def buildStep = "Build image for ${s}"
/*    stepsForParallel[buildStep] = makeImageStep(pipeline_version,
                                                kernelci_arches.get(i),
                                                debian_arches.get(i))*/
    buildStep = "Build test suite for ${s}"
    stepsForParallel[buildStep] = makeBuildStep(pipeline_version,
                                                kernelci_arches.get(i),
                                                debian_arches.get(i),
                                                toolchain_arches.get(i))
}

parallel stepsForParallel
/*
node {
  try {
    sh "rm -rf *"
    sh "ls -l"
    for (int i = 0; i < kernelci_arches.size(); i++) {
      def arch = kernelci_arches.get(i)
      stage("Adding test suite to image for ${arch}") {
        unstash "rootfs-${arch}"
        unstash "libdrm-${arch}"
        unstash "igt-${arch}"
        sh "gunzip rootfs.cpio.gz"
        dir("ramdisk") {
          sh """
            zcat ../libdrm.cpio.gz | cpio -iud
            zcat ../igt.cpio.gz | cpio -iud
            find . | cpio --format=newc --verbose --create --append --file=../rootfs.cpio
          """
        }
        sh "gzip -c rootfs.cpio > rootfs-igt-${arch}.cpio.gz"
        archiveArtifacts artifacts: "rootfs-igt-${arch}.cpio.gz", fingerprint: true
      }
    }
  } finally {
    deleteDir()
  }
}
*/
